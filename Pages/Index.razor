@page "/"
@using SpotifyAPI.Web
@using SpotifyBlazor.Controllers
@using SpotifyBlazor.Data
@using SpotifyBlazor.Models
@inject NavigationManager navManager

@* UI to show mixing desk with sliders of parameters to meet e.g. instrumentalness, tempo etc
App will get all users songs and generate playlist meeting parameters
 *@

<PageTitle>Spotify Login</PageTitle>

@if (_isAuthed && _me != null)
{
    @if (!SpotifyClientController.ActiveDevice)
    {
        <h2>Welcome @_me.DisplayName!</h2>
        <p>
            Please select a device:
            <div>
                <ul>
                    @foreach (var device in _devicesList)
                    {
                        <button id=@device.Name>
                            <a @onclick="() => SpotifyClientController.ChooseDevice(_spotify, device)">@device.Name</a>
                        </button>
                    }
                </ul>
            </div>
        </p>
    }
    else
    {
        <h2>Welcome @_me.DisplayName!</h2>
        <p>
            You have a grant total of @_totalPlaylistCount playlists!
        </p>
        if (_selectedPlaylist is null)
        {
            @foreach (var playlist in _playlists)
            {
                <tr>
                    <td>
                        <button @onclick="(() => GetTracksFromPlaylist(playlist))">@playlist.Name</button>
                    </td>
                    <td>@playlist.Tracks.Total</td>
                </tr>
            }
        }
        if (_selectedPlaylist is not null)
        {
            <p>@_selectedPlaylist.Name</p>
            var totalTracks = $"Total number of tracks: {_selectedPlaylist.Tracks.Total}";
            <p>@totalTracks</p>

            SpotifyClientController.IsPlaying = _spotify.Player.GetCurrentlyPlaying(new PlayerCurrentlyPlayingRequest()).Result.IsPlaying;

            <button id="previous" @onclick="() => SpotifyClientController.Previous(_spotify)">Previous</button>

            @if (SpotifyClientController.IsPlaying)
            {
                <button id="pause" @onclick="() => SpotifyClientController.Pause(_spotify)">Pause</button>
            }
            else if (!SpotifyClientController.IsPlaying)
            {
                <button id="play" @onclick="() => SpotifyClientController.Play(_spotify, _selectedPlaylist)">Play</button>
            }
            <button id="next" @onclick="() => SpotifyClientController.Next(_spotify)">Next</button>
            <button @onclick="GoBackToPlaylists">Back to Playlists</button>

            <p>@SpotifyClientController.IsPlaying</p>

            <EditForm Model="_trackRequirements" OnValidSubmit="@(() => TrackService.GetFeatures(_spotify, _selectedPlaylist))">
                <div class="mb-3">
                    <label for="instrumentalness" class="form-label">Instrumentalness:</label>
                    <input @bind="TrackRequirements.Instrumentalness" type="number" step="0.01" id="instrumentalness" class="form-control" name="instrumentalness">
                </div>
                <div class="mb-3">
                    <label for="speechiness" class="form-label">Speechiness:</label>
                    <input @bind="TrackRequirements.Speechiness" type="number" step="0.01" id="speechiness" class="form-control" name="speechiness">
                </div>
                <input type="submit" value="Submit" class="btn btn-primary">
            </EditForm>
            <br/>

            if (TrackService.MatchingTracks is not null)
            {
                <table class="table">
                    <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Instrumentalness</th>
                        <th scope="col">Speechiness</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var track in TrackService.MatchingTracks)
                    {
                        <tr>
                            <td>@track.Name</td>
                            <td>@track.Instrumentalness</td>
                            <td>@track.Speechiness</td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        }
    }
}
else
{
    <span>To get started:</span>
    <a href="@_authUri">
        Login via Spotify
    </a>
}

@code {

    private Uri _authUri;

    private bool _isAuthed;

    private PrivateUser _me;

    private Dictionary<string, string>? _fragmentParams;

    private int? _totalPlaylistCount;

    private List<SimplePlaylist>? _playlists;

    private SimplePlaylist? _selectedPlaylist;

    private SpotifyClient _spotify;

    private DeviceResponse _devices;

    private List<Device> _devicesList;

    private bool _isPlaying;

    private readonly TrackRequirements _trackRequirements = new();
    
    protected override void OnInitialized()
    {
        var clientId = "716a29344d854ebcbdbe2ea5394848d4";
        var baseUri = navManager.ToAbsoluteUri(navManager.BaseUri);

        var loginRequest = new LoginRequest(baseUri, clientId, LoginRequest.ResponseType.Token)
        {
            Scope = new[] { Scopes.PlaylistReadPrivate, Scopes.PlaylistReadCollaborative, Scopes.AppRemoteControl, Scopes.Streaming, Scopes.UserModifyPlaybackState, Scopes.UserReadCurrentlyPlaying, Scopes.UserReadPlaybackState }
        };
        _authUri = loginRequest.ToUri();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        var maxLen = Math.Min(1, uri.Fragment.Length);
        _fragmentParams = uri.Fragment.Substring(maxLen)?
            .Split("&", StringSplitOptions.RemoveEmptyEntries)?
            .Select(param => param.Split("=", StringSplitOptions.RemoveEmptyEntries))?
            .ToDictionary(param => param[0], param => param[1]) ?? new Dictionary<string, string>();

        _isAuthed = _fragmentParams.ContainsKey("access_token");
        if (_isAuthed)
        {
            _spotify = new SpotifyClient(_fragmentParams["access_token"]);

            _me = await _spotify.UserProfile.Current();
            _totalPlaylistCount = (await _spotify.Playlists.CurrentUsers()).Total;
            _playlists = (await _spotify.Playlists.CurrentUsers()).Items;

            _devices = await _spotify.Player.GetAvailableDevices();

            _devicesList = _devices.Devices;
        }
    }

    private void GetTracksFromPlaylist(SimplePlaylist playlist)
    {
        _selectedPlaylist = playlist;
    }

    private void GoBackToPlaylists()
    {
        _selectedPlaylist = null;
        TrackService.MatchingTracks = null;
    }
}