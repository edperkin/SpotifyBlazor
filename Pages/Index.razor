@page "/"
@using SpotifyAPI.Web
@using SpotifyBlazor.Controllers
@using SpotifyBlazor.Data
@inject NavigationManager navManager

<PageTitle>Spotify Login</PageTitle>

@if (_isAuthed && _me != null)
{
    @if (!SpotifyClientController.ActiveDevice)
    {
        <h2 class="text-center my-4">Welcome @_me.DisplayName!</h2>
        <div class="d-flex flex-column min-vh-100">
            <div class="d-flex flex-grow-1 justify-content-center">
                @if (_devicesList.Count == 0)
                {
                    <p>Please open the spotify app on a device then refresh page</p>
                }
                else
                {
                    <p>
                        Please select a device:
                        <div>
                            <ul>
                                @foreach (var device in _devicesList)
                                {
                                    <button id=@device.Name>
                                        <a @onclick="() => SpotifyClientController.ChooseDevice(_spotify, device)">@device.Name</a>
                                    </button>
                                }
                            </ul>
                        </div>
                    </p>
                }
            </div>
        </div>
    }
    else
    {
        <h2>Welcome @_me.DisplayName!</h2>
        <p>
            You have a grand total of @_totalPlaylistCount playlists!
        </p>
        if (_selectedPlaylist is null)
        {
            @foreach (var playlist in _playlists)
            {
                <tr>
                    <td>
                        <button @onclick="(() => GetTracksFromPlaylist(playlist))">@playlist.Name</button>
                    </td>
                    <td>@playlist.Tracks.Total</td>
                </tr>
            }
        }
        if (_selectedPlaylist is not null)
        {
            <p>@_selectedPlaylist.Name</p>
            var totalTracks = $"Total number of tracks: {_selectedPlaylist.Tracks.Total}";
            <p>@totalTracks</p>

            SpotifyClientController.IsPlaying = _spotify.Player.GetCurrentlyPlaying(new PlayerCurrentlyPlayingRequest()).Result.IsPlaying;

            <button id="previous" @onclick="() => SpotifyClientController.Previous(_spotify)">Previous</button>

            @if (SpotifyClientController.IsPlaying)
            {
                <button id="pause" @onclick="() => SpotifyClientController.Pause(_spotify)">Pause</button>
            }
            else if (!SpotifyClientController.IsPlaying)
            {
                <button id="play" @onclick="() => SpotifyClientController.Play(_spotify, _selectedPlaylist)">Play</button>
            }
            <button id="next" @onclick="() => SpotifyClientController.Next(_spotify)">Next</button>
            <button @onclick="GoBackToPlaylists">Back to Playlists</button>

            <p>@SpotifyClientController.IsPlaying</p>

            <TrackAttributteFilter Spotify="_spotify" SelectedPlaylist="_selectedPlaylist" OnTracksAddedExecuted="UpdateTrackList" OnTracksRemovedExecuted="UpdateTrackList"/>
            
            <br/>
            <div class="container">
                @if (TrackService.MatchingTracks is not null)
                {
                    <table class="table table-dark table-striped">
                        <thead>
                        <tr>
                            <th scope="col">Name</th>
                            <th scope="col">Instrumentalness</th>
                            <th scope="col">Speechiness</th>
                            <th scope="col">Valence</th>
                            <th scope="col">Acousticness</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var track in TrackService.MatchingTracks)
                        {
                            <tr>
                                <td>@track.Name</td>
                                <td>@track.Instrumentalness%</td>
                                <td>@track.Speechiness%</td>
                                <td>@track.Valence%</td>
                                <td>@track.Acousticness%</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
            </div>
        }
    }
}
else
{
    <span>To get started:</span>
    <a href="@_authUri">
        Login via Spotify
    </a>
}

@code {
    private static IConfiguration _secrets;

    private Uri _authUri;

    private bool _isAuthed;

    private PrivateUser _me;

    private Dictionary<string, string>? _fragmentParams;

    private int? _totalPlaylistCount;

    private List<SimplePlaylist>? _playlists;

    private SimplePlaylist? _selectedPlaylist;

    private SpotifyClient _spotify;

    private DeviceResponse _devices;

    private List<Device> _devicesList;

    private bool _isPlaying;
    
    protected override void OnInitialized()
    {
        _secrets = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("secrets.json")
            .Build();

        var baseUri = navManager.ToAbsoluteUri(navManager.BaseUri);

        var loginRequest = new LoginRequest(baseUri, _secrets["spotify_client_id"], LoginRequest.ResponseType.Token)
        {
            Scope = new[]
            {
                Scopes.PlaylistReadPrivate,
                Scopes.PlaylistReadCollaborative,
                Scopes.AppRemoteControl,
                Scopes.Streaming,
                Scopes.UserModifyPlaybackState,
                Scopes.UserReadCurrentlyPlaying,
                Scopes.UserReadPlaybackState,
                Scopes.PlaylistModifyPrivate,
                Scopes.PlaylistModifyPublic
            }
        };
        _authUri = loginRequest.ToUri();
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(navManager.Uri);
        var maxLen = Math.Min(1, uri.Fragment.Length);
        _fragmentParams = uri.Fragment.Substring(maxLen)?
            .Split("&", StringSplitOptions.RemoveEmptyEntries)?
            .Select(param => param.Split("=", StringSplitOptions.RemoveEmptyEntries))?
            .ToDictionary(param => param[0], param => param[1]) ?? new Dictionary<string, string>();

        _isAuthed = _fragmentParams.ContainsKey("access_token");
        if (_isAuthed)
        {
            _spotify = new SpotifyClient(_fragmentParams["access_token"]);

            _me = await _spotify.UserProfile.Current();
            _totalPlaylistCount = (await _spotify.Playlists.CurrentUsers()).Total;

            _playlists ??= new List<SimplePlaylist>();
            const int limit = 50;
            const int offset = 0;
            var request = new PlaylistCurrentUsersRequest { Limit = limit, Offset = offset };
            
            while (true)
            {
                var response = await _spotify.Playlists.CurrentUsers(request);
            
                _playlists.AddRange(response.Items.Select(item => new SimplePlaylist
                {
                    Id = item.Id,
                    Name = item.Name,
                    Tracks = item.Tracks
                }));
            
                if (!string.IsNullOrWhiteSpace(response.Next))
                {
                    request.Offset += limit;
                }
                else
                {
                    break;
                }
            }
            
            _devices = await _spotify.Player.GetAvailableDevices();

            _devicesList = _devices.Devices;
        }
    }

    private void GetTracksFromPlaylist(SimplePlaylist playlist)
    {
        _selectedPlaylist = playlist;
    }

    private void GoBackToPlaylists()
    {
        _selectedPlaylist = null;
        TrackService.MatchingTracks = null;
    }

    private void UpdateTrackList()
    {
        StateHasChanged();
    }
}