@using SpotifyBlazor.Data
@using SpotifyAPI.Web
@using TrackRequest = SpotifyBlazor.Models.TrackRequest

<div class="container">
    <EditForm Model="_trackRequest" OnValidSubmit="@(() => TrackService.GetAudioFeatures(Spotify, SelectedPlaylist))">
        <div class="row">
            <div class="col">
                <div class="range">
                    <p id="rangeValue1" class="slider-label-value">50</p>
                    <input @bind="TrackRequest.Instrumentalness" type="range" min="0" max="100" id="instrumentalness" name="instrumentalness" disabled oninput="rangeValue1.innerText = this.value">
                </div>
                <div>
                    <label class="check-label" id='instrumentalness_label' data-text="Instrumentalness" onChange="myFunction(instrumentalness_label, 'check-instrumentalness')";>
                        <img src="icons/drum-solid.svg" alt="drum icon" class="svg-icon"/>
                        <input type='checkbox' id='check-instrumentalness' class="form-check-input" onchange='check("check-instrumentalness", "instrumentalness")' hidden/>
                    </label>
                </div>
            </div>
            <br/>
            <div class="col">
                <div class="range">
                    <p id="rangeValue2" class="slider-label-value">50</p>
                    <input @bind="TrackRequest.Speechiness" type="range" min="0" max="100" id="speechiness" name="speechiness" disabled oninput="rangeValue2.innerText = this.value">
                </div>
                <div>
                    <label class="check-label" id='speechiness_label' data-text="Speechiness" onChange="myFunction(speechiness_label, 'check-speechiness')";>
                        <img src="icons/microphone-solid.svg" alt="drum icon" class="svg-icon"/>
                        <input type='checkbox' id='check-speechiness' class="form-check-input" onchange='check("check-speechiness", "speechiness")' hidden/>
                    </label>
                </div>
            </div>
            <br/>
            <div class="col">
                <div class="range">
                    <p id="rangeValue3" class="slider-label-value">50</p>
                    <input @bind="TrackRequest.Valence" type="range" min="0" max="100" id="valence" name="valence" disabled oninput="rangeValue3.innerText = this.value">
                </div>
                <div>
                    <label class="check-label" id='valence_label' data-text="Valence" onChange="myFunction(valence_label, 'check-valence')";>
                        <img src="icons/face-smile-solid.svg" alt="drum icon" class="svg-icon"/>
                        <input type='checkbox' id='check-valence' class="form-check-input" onchange='check("check-valence", "valence")' hidden/>
                    </label>
                </div>
            </div>
            <div class="col">
                <div class="range">
                    <p id="rangeValue4" class="slider-label-value">50</p>
                    <input @bind="TrackRequest.Acousticness" type="range" min="0" max="100" id="acousticness" name="acousticness" disabled oninput="rangeValue4.innerText = this.value">
                </div>
                <div>
                    <label class="check-label" id='acousticness_label' data-text="Acousticness" onChange="myFunction(acousticness_label, 'check-acousticness')";>
                        <img src="icons/guitar-solid.svg" alt="drum icon" class="svg-icon"/>
                        <input type='checkbox' id='check-acousticness' class="form-check-input" onchange='check("check-acousticness", "acousticness")' hidden/>
                    </label>
                </div>
            </div>
        </div>
        <br/>
        <div class="col">
            <input type="submit" value="Submit" class="btn btn-primary">
        </div>
    </EditForm>
    <br/>
    <button @onclick="ClearResults">Clear Results</button>
    <button @onclick="CreatePlaylist">Create Playlist</button>
</div>

@code {

    [Parameter] 
    public SpotifyClient Spotify { get; set; }
    
    [Parameter] 
    public SimplePlaylist? SelectedPlaylist { get; set; }
    
    [Parameter]
    public EventCallback OnTracksAddedExecuted { get; set; }
    
    [Parameter]
    public EventCallback OnTracksRemovedExecuted { get; set; }

    private readonly TrackRequest _trackRequest = new();

    protected override void OnInitialized()
    {
        TrackService.OnTracksAdded += ServiceTracksAdded;
    }

    private void ServiceTracksAdded()
    {
        OnTracksAddedExecuted.InvokeAsync(null);
    }
    
    private async Task CreatePlaylist()
    {
        var playlist = await Spotify.Playlists.Create(Spotify.UserProfile.Current().Result.Id, new PlaylistCreateRequest("Edify Playlist"));
        await Spotify.Playlists.AddItems(playlist.Id, new PlaylistAddItemsRequest(uris: TrackService.MatchingTracks.Select(t => t.Uri).ToList()));
        Console.WriteLine("Playlist Created");
    }

    private async Task ClearResults()
    {
        TrackService.MatchingTracks = null;
        await OnTracksRemovedExecuted.InvokeAsync(null);
    }
}
